name: local_microdotnet_statemachines

services:
    local.microdotnet.services.statemachines.eventstore:
        container_name: local.microdotnet.services.statemachines.eventstore
        hostname: local.microdotnet.services.statemachines.eventstore
        image: eventstore/eventstore:22.10.0-buster-slim
        restart: always
        networks:
            - local.microdotnet.services.statemachines
        environment:
            - EVENTSTORE_CLUSTER_SIZE=1
            - EVENTSTORE_RUN_PROJECTIONS=All
            - EVENTSTORE_START_STANDARD_PROJECTIONS=true
            - EVENTSTORE_INSECURE=true
            - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
            - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
            - EVENTSTORE_HTTP_PORT=2113
            - EVENTSTORE_ADVERTISE_TCP_PORT_TO_CLIENT_AS=10001
            - EVENTSTORE_ADVERTISE_HTTP_PORT_TO_CLIENT_AS=10002
        ports:
            - "10001:1113"
            - "10002:2113"
        volumes:
            - type: volume
              source: eventstore-data
              target: /var/lib/eventstore
            - type: volume
              source: eventstore-logs
              target: /var/log/eventstore

    local.microdotnet.services.statemachines.mongo:
        container_name: local.microdotnet.services.statemachines.mongo
        hostname: local.microdotnet.services.statemachines.mongo
        image: mongo
        restart: always
        networks:
            - local.microdotnet.services.statemachines
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: Pa55VV0RD
        ports:
            - 10003:27017
        volumes:
            - mongo-configdb:/data/configdb
            - mongo-volume:/data/db

    local.microdotnet.services.statemachines.mongoexpress:
        container_name: local.microdotnet.services.statemachines.mongoexpress
        hostname: local.microdotnet.services.statemachines.mongoexpress
        image: mongo-express
        restart: always
        networks:
            - local.microdotnet.services.statemachines
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: Pa55VV0RD
            ME_CONFIG_MONGODB_URL: mongodb://root:Pa55VV0RD@local.microdotnet.services.statemachines.mongo:27017
        ports:
            - 10004:8081
        depends_on:
            - local.microdotnet.services.statemachines.mongo

    local.microdotnet.services.statemachines.elasticsearch:
        container_name: local.microdotnet.services.statemachines.elasticsearch
        hostname: local.microdotnet.services.statemachines.elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
        environment:
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms1g -Xmx1g
            - discovery.type=single-node
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certs/statemachines.elasticsearch.pkcs8.pem
            - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/intermediate.crt
            - xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certs/statemachines.elasticsearch.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.verification_mode=certificate 
            - xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/statemachines.elasticsearch.pkcs8.pem
            - xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certs/intermediate.crt
            - xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/statemachines.elasticsearch.crt
            - ELASTIC_PASSWORD=password
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - esdata:/usr/share/elasticsearch/data
            - .\docker\certificates:/usr/share/elasticsearch/config/certs  # Add your certs here
            - .\docker\certificates\intermediate.crt:/usr/local/share/ca-certificates/MicroDotNet-IntermediateCA.crt
            - .\docker\certificates\ca.crt:/usr/local/share/ca-certificates/MicroDotNet-RootCA.crt
        ports:
            - 10005:9200
        networks:
            - local.microdotnet.services.statemachines

    local.microdotnet.services.statemachines.logstash:
        container_name: local.microdotnet.services.statemachines.logstash
        hostname: local.microdotnet.services.statemachines.logstash
        image: docker.elastic.co/logstash/logstash:8.15.2
        volumes:
            - .\docker\logstash\pipeline:/usr/share/logstash/pipeline
            - .\docker\certificates\intermediate.crt:/usr/local/share/ca-certificates/MicroDotNet-IntermediateCA.crt
            - .\docker\certificates\ca.crt:/usr/local/share/ca-certificates/MicroDotNet-RootCA.crt
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        ports:
            - 10006:9600
        networks:
            - local.microdotnet.services.statemachines
        depends_on:
            - local.microdotnet.services.statemachines.elasticsearch

    local.microdotnet.services.statemachines.kibana:
        container_name: local.microdotnet.services.statemachines.kibana
        hostname: local.microdotnet.services.statemachines.kibana
        image: docker.elastic.co/kibana/kibana:8.15.2
        environment:
            ELASTICSEARCH_HOSTS: https://local.microdotnet.services.statemachines.elasticsearch:9200
        volumes:
            - .\docker\kibana\kibana.yml:/usr/share/kibana/config/kibana.yml
            - .\docker\certificates\intermediate.crt:/etc/kibana/certs/MicroDotNet-IntermediateCA.crt
            - .\docker\certificates\ca.crt:/etc/kibana/certs/MicroDotNet-RootCA.crt
        ports:
            - 10007:5601
        networks:
            - local.microdotnet.services.statemachines
        depends_on:
            - local.microdotnet.services.statemachines.elasticsearch

    local.microdotnet.services.statemachines.webapi:
        container_name: local.microdotnet.services.statemachines.webapi
        hostname: local.microdotnet.services.statemachines.webapi
        image: microdotnet.services.statemachines:local
        restart: always
        environment:
            - ASPNETCORE_URLS=http://+:80
            - ConnectionStrings__EventsDB=esdb://local.microdotnet.services.statemachines.eventstore:2113/?tls=false
            - ConnectionStrings__ReadDB=mongodb://root:Pa55VV0RD@local.microdotnet.services.statemachines.mongo:27017
        networks:
            - local.microdotnet.services.statemachines
        ports:
            - 10008:80
        depends_on:
            - local.microdotnet.services.statemachines.eventstore
            - local.microdotnet.services.statemachines.mongo

networks:
    local.microdotnet.services.statemachines:
        driver: bridge

volumes:
    eventstore-data:
    eventstore-logs:
    mongo-configdb:
    mongo-volume:
    esdata:
